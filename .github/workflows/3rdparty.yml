name: 'Update 3rd party action'

# Controls when the action will run.
on:
  workflow_dispatch:
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Any text'
        # Default value if no value is explicitly provided
        default: 'World'
        required: false
  # schedule:
  #   - cron: '0 0 * * 6' # Run on Saturday

jobs:
  Update3rdParty:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: yarn

    - name: Linting and build scripts
      run: yarn build:scripts

    - name: Run 3rd party update
      run: node dist/scripts/update-3rd-party.js

    - name: Add changes
      run: hub add

    - name: Check Changes
      id: has-changes
      run: |
        if hub diff --quiet; then
          echo "::set-output name=hasChanges::false"
          echo "No Changes";
        else
          echo "::set-output name=hasChanges::true"
          echo "Changes";
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}

    - name: Run tests
      id: tests
      if: steps.has-changes.outputs.hasChanges == 'true'
      run: |
        if yarn test; then
          echo "::set-output name=hasError::false"
          echo "No Error!!"
        else
          echo "::set-output name=hasError::true"
          echo "Error!!"
        fi

    - name: If Changes
      if: steps.has-changes.outputs.hasChanges == 'true'
      run: |
        echo "Changes!!"
        echo "${{ steps.has-changes.outputs.hasChanges }}"

    - name: If No Changes
      if: steps.has-changes.outputs.hasChanges == 'false'
      run: |
        echo "No Changes!!"
        echo "${{ steps.has-changes.outputs.hasChanges }}"

    - name: Test Ok
      if: steps.tests.outputs.hasError == 'false'
      run: |
        echo "Test Ok!!"
        echo "${{ steps.tests.outputs.hasError }}"

    - name: Test fail!!
      if: steps.tests.outputs.hasError == 'true'
      run: |
        echo "No Changes!!"
        echo "${{ steps.tests.outputs.hasError }}"

    - name: Configure user
      if: steps.has-changes.outputs.hasChanges == 'true'
      run: |
        git config --global user.email ${{ secrets.GIT_USER_EMAIL }}
        git config --global user.name ${{ secrets.GIT_USER_NAME }}

    - name: Create new Branch
      if: steps.has-changes.outputs.hasChanges == 'true' && steps.tests.outputs.hasError == 'true'
      run: |
        hub switch -c "3rd-party-bot/run-${{ github.run_id }}-${{ github.run_number }}" origin/main
        hub add .
        hub commit -m "Chore: Update 3rd party data"
        hub push -u origin "3rd-party-bot/run-${{ github.run_id }}-${{ github.run_number }}"
      env:
        GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}

    - name: Create pull request
      if: steps.has-changes.outputs.hasChanges == 'true' && steps.tests.outputs.hasError == 'true'
      run: |
        hub pull-request -b main -m "Chore: Update 3rd party data"
      env:
        GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}


    # if hub diff --quiet; then
    #   echo "Changes!!"
    # else
    #   echo "No Changes"
    # fi
    # - name: Test gh
    #   run: gh --version
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}

    # - name: Test
    #   id: changes
    #   uses: UnicornGlobal/has-changes-action@v1.0.11

    # - name: Print status 2
    #   run: |
    #     git status
    #     echo "${{steps.changes.outputs.changed}}"
    #     git add .
    #     echo "${{steps.changes.outputs.changed}}"
    #     git status

    # - name: Create Pull Request
    #   if: steps.changes.outputs.changed == 1
    #   uses: peter-evans/create-pull-request@v3.1.0
    #   with:
    #     commit-message: 'Chore: Update 3rd party'
    #     branch: "create-pull-request/run-${{ github.run_id }}-${{ github.run_number}}"
    #     draft: false
    #     title: '[Action] Update 3rd party'
    #     labels:  "automerge"
    #     token: "${{ secrets.MY_TOKEN }}"


